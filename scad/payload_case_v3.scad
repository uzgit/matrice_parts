include <../library/boxes.scad>
include <../library/roundedcube.scad>
include <../library/honeycomb.scad>
include <quick_release_bracket_v4.scad>

$fn=80;

//radius = 145/2;
radius = 150/2;
top_radius = radius / 1.15;

thickness=10;
bottom_thickness=3;
structural_support_thickness = 6;
edge_thickness=1.2;
edge_height=5;    // cuts into the wall generated by wall_height
wall_thickness = 3;
canopy_top_wall_thickness = 2;
intended_wall_height = 1;
wall_height = max(thickness+edge_height+1, intended_wall_height);  // primary control for the z-distance extrusion of the bottom wall
eport_wall_angle = 30;
eport_cable_clearance_x = 4;
eport_cable_clearance_y = 20;
eport_cable_clearance_z = 2*(3.5 + edge_height); // below the edge, so eport_cable_clearance_z < bottom_thickness + (thickness - edge_height)
echo("eport_cable_clearance_z: ", eport_cable_clearance_z);
eport_cable_clearance_r = 2;

skyport_wall_angle = -30;

locking_screws = true;
num_lock_blocks = 3;
locking_screw_angles = [ 0 : 360/num_lock_blocks : 359 ];
canopy_lock_block_x = 30;
canopy_lock_block_y = 6;
canopy_lock_block_z = 35;
canopy_mount_screw_radius = radius - 5;
bottom_lock_block_x = 30;
bottom_lock_block_y = 10;
bottom_lock_block_z = 25;
//lock_block_translation_x = radius - 
canopy_height = 80;
canopy_top_thickness = 1;
ventilation = true;
ventilation_height = 4;
ventilation_width  = 20;
ventilation_depth  = radius;
ventilation_honeycomb_depth = 42;
ventilation_honeycomb_center_translation = 18;

screw_spacing_x = 78;
screw_spacing_y = 66;

fan_side   = 40;
fan_screw_xy  = 32;
fan_screw_diameter = 4.5;
fan_height = 20;
fan_honeycomb_thickness = 2;
fan_diameter = 38;
fan_cage_height = 25; // height from bottom of case, not bottom of fan
fan_cage_side = 50;
fan_cage_wall_thickness = 5;
fan_cage_honeycomb_diameter = 20;
fan_cage_honeycomb_thickness = 0.75;
fan_cage_top_support_thickness = 3;

vertical_structural_support_x = 10;
vertical_structural_support_y = screw_spacing_y + 20;
horizontal_structural_support_y = 55;

vent_honeycomb_height = 15;
vent_honeycomb_side = 35;
vent_honeycomb_depth = 10;
vent_honeycomb_diameter = 2;
vent_honeycomb_thickness = 0.5;

module fan()
{
    roundedCube([fan_side, fan_side, fan_height], center=true, 3, "z");
}

module regular_polygon(sides, apothem)
{
  phi = 90 - 90*(sides-2)/sides;
  radius = apothem / cos(phi);

  function dia(r) = sqrt(pow(r*2,2)/2);  //sqrt((r*2^2)/2) if only we had an exponention op
  if(sides<2) square([radius,0]);
  if(sides==3) triangle(radius);
  if(sides==4) square([dia(radius),dia(radius)],center=true);
  if(sides>4) {
    angles=[ for (i = [0:sides-1]) i*(360/sides) ];
    coords=[ for (th=angles) [radius*cos(th), radius*sin(th)] ];
    
    angle = 90*(sides-2)/sides;
    rotate([0, 0, phi])
    polygon(coords);
  }
}

module regular_prism(sides, apothem, height)
{
    linear_extrude(height)
    {
        regular_polygon(sides, apothem);
    }
}

module dodecagon_prism(height, radius)
{
    linear_extrude(height)
    {
        regular_polygon(12, radius);
    }
}

module everything()
{
    cube([10000, 10000, 10000], center=true);
}

//module top()
//{
//    difference()
//    {
//        // primary positive space
//        union()
//        {
//            // bottom edge
//            difference()
//            {
//                dodecagon_prism(height=edge_height, radius=radius);
//                dodecagon_prism(height=edge_height, radius=radius-edge_thickness);
//            }
//            
//            // main canopy
//            difference()
//            {
//                hull()
//                {
//                    // wall
//                    translate([0, 0, edge_height])
//                    dodecagon_prism(height=wall_height, radius=radius);
//                    
//                    translate([0, 0, edge_height - wall_height + canopy_height])
//                    dodecagon_prism(height=wall_height, radius=top_radius);
//                }
//                hull()
//                {
//                    // wall
//                    translate([0, 0, edge_height])
//                    dodecagon_prism(height=wall_height, radius=radius-wall_thickness);
//                    
//                    translate([0, 0, edge_height - wall_height + canopy_height - canopy_top_thickness])
//                    dodecagon_prism(height=wall_height-wall_thickness, radius=top_radius-wall_thickness);
//                }
//            }
//            
//            // reinforcements for mounting screws
//            if( locking_screws )
//            {
//                num = 3;
//                
//                for( angle = [ 0 : 360/num : 359 ] )
//                {
//                    rotate([0, 0, angle])
//                    translate([0, canopy_mount_screw_radius, edge_height])
//                    hull()
//                    {
//                        cylinder(d=10, h=50);
//                        
//                        translate([0, 5, 25])
//                        cube([10, 1, 50], center=true);
//                    }
//                }
//            }
//        }
//        union()
//        {
//            // to get rid of the parts of the screw supports that were
//            // sticking out of the main hull, we subtract everything that is outside
//            // of the main hull and above the edge.
//            difference()
//            {
//                translate([-5000, -5000, edge_height])
//                cube([10000, 10000, 10000]);
//                
//                hull()
//                {
//                    // wall
//                    translate([0, 0, edge_height])
//                    dodecagon_prism(height=wall_height, radius=radius);
//                    
//                    translate([0, 0, edge_height - wall_height + canopy_height])
//                    dodecagon_prism(height=wall_height, radius=top_radius);
//                }
//            }
//        
//            if( ventilation )
//            {
//                num = 6;
//                
//                for( angle = [ 0 : 360/num : 359 ] )
//                {
//                    rotate([0, 0, angle])
//                    translate([0, top_radius/2, canopy_height + canopy_top_thickness + edge_height - 6])
//                    union()
//                    {
//                        rotate([90, 0, 180])
//                        roundedCube([ventilation_width, ventilation_height, ventilation_depth], 1, "xy", center=true);
//                    }
//                }
//                
//                translate([0, 0, canopy_height + edge_height - 6])
//                rotate([0, 0, 30])
//                regular_prism(6, 18, 5);
//            }
//        }
//        
//        // screw holes for mounting screws
//        if( locking_screws )
//        {
//            num = 3;
//            
//            for( angle = [ 0 : 360/num : 359 ] )
//            {
//                rotate([0, 0, angle])
//                union()
//                {
//                    translate([0, canopy_mount_screw_radius, edge_height])
//                    cylinder(d=3.2, h=50);
//                    
//                    translate([0, canopy_mount_screw_radius, edge_height+5])
//                    cylinder(d=5.75, h=50);
//                }
//            }
//        }
//    }
//}

module top_v2()
{
    difference()
    {
        // primary positive space
        union()
        {
            // bottom edge
            difference()
            {
                dodecagon_prism(height=edge_height, radius=radius);
                dodecagon_prism(height=edge_height, radius=radius-edge_thickness);
            }
            
            // wall
            translate([0, 0, edge_height])
            difference()
            {
                dodecagon_prism(height=wall_height, radius=radius);
                dodecagon_prism(height=wall_height, radius=radius-wall_thickness);
            }

            // to smoothen the edge
            translate([0, 0, edge_height])
            difference()
            {
                dodecagon_prism(height=50, radius=radius);
                dodecagon_prism(height=50, radius=radius-wall_thickness);
            }
            
            // main canopy
            translate([0, 0, edge_height + wall_height])
            difference()
            {
                hull()
                {
                    dodecagon_prism(height=1, radius=radius);
                    
                    translate([0, 0, canopy_height - edge_height - wall_height])
                    dodecagon_prism(height=1, radius=top_radius);
                }
                
                hull()
                {
                    dodecagon_prism(height=1, radius=radius - canopy_top_wall_thickness);
                    
                    translate([0, 0, canopy_height - edge_height - wall_height - canopy_top_thickness])
                    dodecagon_prism(height=1, radius=top_radius - canopy_top_wall_thickness);
                }
            }
            
            // reinforcements for mounting screws
            if( locking_screws )
            {
                num = 3;
                
                for( angle = [ 0 : 360/num : 359 ] )
                {
                    rotate([0, 0, angle])
                    translate([0, canopy_mount_screw_radius, edge_height])
                    hull()
                    {
                        cylinder(d=10, h=canopy_height - edge_height);
                        
                        translate([0, 4, 25])
                        cube([10, 1, 50], center=true);
                    }
                }
            }
        }
        union()
        {
            difference()
            {
                translate([-5000, -5000, edge_height + wall_height])
                cube([10000, 10000, 10000]);
                
                translate([0, 0, edge_height + wall_height])
                hull()
                {
                    dodecagon_prism(height=1, radius=radius);
                    
                    translate([0, 0, canopy_height - edge_height - wall_height])
                    dodecagon_prism(height=1, radius=top_radius);
                }
            }
            
        // screw holes for mounting screws
        if( locking_screws )
        {
            num = 3;
            
            for( angle = [ 0 : 360/num : 359 ] )
            {
                rotate([0, 0, angle])
                union()
                {
                    translate([0, canopy_mount_screw_radius, edge_height])
                    cylinder(d=3.2, h=50);
                    
                    translate([0, canopy_mount_screw_radius, edge_height+5])
                    cylinder(d=5.75, h=canopy_height - edge_height);
                }
            }
        }
        }
    }
}

module base_plate()
{
    difference()
    {
        // primary positive space
        union()
        {
            difference()
            {
                // bottom
                dodecagon_prism(height=bottom_thickness, radius=radius);
                
                translate([-3.5, 0, bottom_thickness/2])
                {
                    roundedcube([27.5, 125, 2*bottom_thickness], radius=3, center=true);
                }
            }
            
            // wall
            difference()
            {
                // main positive space for the base
                dodecagon_prism(height=wall_height, radius=radius);
                
                union()
                {
                    // remove positive space within the wall
                    dodecagon_prism(height=wall_height, radius=radius-wall_thickness);
                    
                    translate([0, 0, wall_height - edge_height])
                    difference()
                    {
                        dodecagon_prism(height=edge_height, radius=radius);
                        dodecagon_prism(height=edge_height, radius=radius-wall_thickness+edge_thickness);
                    }
                }
            }
            
            // reinforcements for mounting screws
            if( locking_screws )
            {
                num = 3;
                
                for( angle = [ 0 : 360/num : 359 ] )
                {
                    rotate([0, 0, angle])
                    translate([0, canopy_mount_screw_radius, 0])
                    difference()
                    {
                        hull()
                        {
                            cylinder(d=10, h=wall_height);
                            
                            translate([0, 2.5, wall_height/2])
                            cube([10, 1, wall_height], center=true);
                        }
                        
                        union()
                        {
                            cylinder(d=4, h=wall_height);
                        
                            translate([0, 4, 0])
                            cube([20, 3, 50], center=true);
                        }
                    }
                }
            }
            for( x_translation=[-screw_spacing_x/2, screw_spacing_x/2] )
            {
                for( y_translation=[-screw_spacing_y/2, screw_spacing_y/2] )
                {
                    translate([x_translation, y_translation, 0])
                    {
                        translate([0, 0, 3])
                        roundedcube([10, 10, 6], center=true);
                    }
                }
            }
            
            // honeycomb inner base
            difference()
            {
                union()
                {
                    translate([-200/2, -200/2, 0])
                    translate([4, 0, 0]) // set screw for making the honeycomb align better to the cavity
                    linear_extrude( bottom_thickness )
                    {
                        honeycomb(200, 200, 3, 6);
                    }
                }
                difference()
                {
                    everything();
                    union()
                    {
                        cylinder(d=145, h=bottom_thickness);
                    }
                }
            }
        }
        // negative space
        union()
        {
            // holes for threaded inserts for bottom mounts
            for( x_translation=[-screw_spacing_x/2, screw_spacing_x/2] )
            {
                for( y_translation=[-screw_spacing_y/2, screw_spacing_y/2] )
                {
                    translate([x_translation, y_translation, 0])
                    {
                        cylinder(d=4, h=6);
                    }
                }
            }
        }
        
            // e port cable slot
            rotate([0, 0, eport_wall_angle])
            translate([0, -radius, wall_height])
            roundedCube([eport_cable_clearance_x, eport_cable_clearance_y, eport_cable_clearance_z], eport_cable_clearance_r, center=true);
            
            // sky port cable slot
            rotate([0, 0, skyport_wall_angle])
            translate([0, -radius, wall_height])
            roundedCube([eport_cable_clearance_x, eport_cable_clearance_y, eport_cable_clearance_z], eport_cable_clearance_r, center=true);
            
//            translate([-3.5, 0, bottom_thickness/2])
//            {
//                roundedcube([27.5, 125, 2*bottom_thickness], radius=3, center=true);
//            }
    }
    

    
    translate([-27, 0, bottom_thickness/2])
    cube([10, 100, bottom_thickness], center=true);
    
    translate([19, 0, bottom_thickness/2])
    cube([17.5, 100, bottom_thickness], center=true);
    
    translate([15, -34, 5 + bottom_thickness])
    rotate([0, 0, -90])
    component_mount();
}

//    translate([15, -34, 5])
//    rotate([0, 0, -90])
//    component_mount();

//regular_prism(6, 50, 10);

//rotate([0, 0, 15])
//my_regular_polygon(12, 100);

//base_plate();

//linear_extrude(10) {
//    honeycomb(100, 100, 5, 10);
//}

//translate([0, 0, 11])
//rotate([180, 0, 0])
top_v2();
